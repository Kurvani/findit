{"version":3,"sources":["redditapi.js","index.js"],"names":["search","searchTerm","searchLimit","sortBy","fetch","then","res","json","data","children","map","catch","err","console","log","searchForm","document","getElementById","searchInput","addEventListener","e","value","querySelector","showMessage","reddit","results","output","forEach","post","image","preview","images","source","url","title","truncateText","selftext","subreddit","score","innerHTML","preventDefault","message","className","div","createElement","appendChild","createTextNode","searchContainer","insertBefore","setTimeout","remove","text","limit","shortened","indexOf","substring"],"mappings":"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","file":"findit.e31bb0bc.map","sourceRoot":"..","sourcesContent":["export default {\r\n  search: function(searchTerm, searchLimit, sortBy) {\r\n    //This is where we're goign to make our request. ?q= is to query\r\n    return fetch(\r\n      //fetch returns a promise\r\n      `http://www.reddit.com/search.json?q=${searchTerm}&sort]${sortBy}&limit=${searchLimit}`\r\n    )\r\n      .then(res => res.json()) // with the fetch api we'll do a .then to get the dresponse and then say we want that response in .json //Then we do another .then to give us the data\r\n      .then(data => data.data.children.map(data => data.data))\r\n      .catch(err => console.log(err)); //Put a catch error function at the end just in case. TODO: are lines 6-10 essentially just one giant line of code separated for the sake of readability? FIND OUT!\r\n  }\r\n};\r\n","import reddit from \"./redditapi\";\r\n\r\nconst searchForm = document.getElementById(\"search-form\");\r\nconst searchInput = document.getElementById(\"search-input\");\r\n\r\n//Grab the searchForm variable and add on an EventListener\r\n//When you have an EventListener you can pass in an event parameter as well (which we use 'e')\r\n\r\n// Form Event Listener\r\nsearchForm.addEventListener(\"submit\", e => {\r\n  // Get search term (we grab this from our searchInput variable and grab the value stored in it)\r\n  const searchTerm = searchInput.value;\r\n\r\n  // Get sort\r\n  // We can use any kind of selector so we do any input with the name of \"sortby\" but we want the one that's checked so we use ':checked'\r\n  const sortBy = document.querySelector('input[name=\"sortby\"]:checked').value;\r\n\r\n  //Get limit\r\n  const searchLimit = document.getElementById(\"limit\").value;\r\n\r\n  // Check input to make sure we don't have an empty form\r\n  if (searchTerm == \"\") {\r\n    //Show message there is nothing typed in\r\n    showMessage(\"Please add a search term\", \"alert-danger\");\r\n  }\r\n\r\n  // Clear input when typing in search\r\n  searchInput.value = \"\";\r\n\r\n  // Search Reddit (we imported our reddit search function that uses the Reddit API)\r\n  reddit.search(searchTerm, searchLimit, sortBy).then(results => {\r\n    let output = '<div class=\"card-columns\">'; //We use let for our variable because we're goign to manipulate it\r\n    // Loop through posts\r\n    results.forEach(post => {\r\n      // Check for image. We're essentailly saying if the post has a preview image use it, otherwise use the image at the URL. The ':' means else.\r\n      const image = post.preview\r\n        ? post.preview.images[0].source.url\r\n        : \"https://cdn.comparitech.com/wp-content/uploads/2017/08/reddit-1.jpg\";\r\n\r\n      output += `\r\n        <div class=\"card\">\r\n  <img class=\"card-img-top\" src=\"${image}\" alt=\"Card image cap\">\r\n  <div class=\"card-body\">\r\n    <h5 class=\"card-title\">${post.title}</h5>\r\n    <p class=\"card-text\">${truncateText(post.selftext, 100)}</p>\r\n    <a href=\"${post.url}\" target=\"_blank\" class=\"btn btn-primary\">Read More</a>\r\n    <hr>\r\n    <span class=\"badge badge-secondary\">Subreddit: ${post.subreddit}</span>\r\n    <span class=\"badge badge-dark\">Upvotes: ${post.score}</span>\r\n    </div>\r\n</div>\r\n        `;\r\n    });\r\n    output += \"</div>\"; //Append the ending div to our output\r\n    document.getElementById(\"results\").innerHTML = output;\r\n  });\r\n\r\n  //preventDefault to prevent the form from actaully submitting to a file\r\n  e.preventDefault();\r\n});\r\n\r\n// Show Message\r\nfunction showMessage(message, className) {\r\n  // Create the div\r\n  const div = document.createElement(\"div\");\r\n\r\n  // Add our classes to that div we just created\r\n  div.className = `alert ${className}`; //We're using backticks because we're going to use a variable; which is a template string which is part of ES6. Now with bootstrap your class should be alert and then whatever the color you want or the type\r\n\r\n  // Add text\r\n  // appendChild() means to put something inside of it. In this case put something inside our div\r\n  div.appendChild(document.createTextNode(message));\r\n\r\n  //Now to get it into the DOM so it displays\r\n  //Get parent\r\n  const searchContainer = document.getElementById(\"search-container\");\r\n  // Get search\r\n  const search = document.getElementById(\"search\");\r\n\r\n  // Insert message\r\n  //so we take the container and we want to insert the 'div' before the 'search' element\r\n  searchContainer.insertBefore(div, search);\r\n\r\n  // Timeout to get rid of alert message after a while\r\n  //We can use an arrow instead of a function TODO: need more details on Arrow Functions\r\n  //Since we are grabing a class we use querySelector().\r\n  //setTimeout takes two parameters, what we're doing and then the time to remove, which is in milliseconds\r\n  setTimeout(() => document.querySelector(\".alert\").remove(), 3000);\r\n}\r\n\r\n// Truncate Text\r\nfunction truncateText(text, limit) {\r\n  const shortened = text.indexOf(\" \", limit);\r\n  if (shortened == -1) return text;\r\n  return text.substring(0, shortened);\r\n}\r\n"]}